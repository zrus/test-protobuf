// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:Commands)
pub struct Commands {
    // message oneof groups
    pub command: ::std::option::Option<commands::Command>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:Commands.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Commands {
    fn default() -> &'a Commands {
        <Commands as ::protobuf::Message>::default_instance()
    }
}

impl Commands {
    pub fn new() -> Commands {
        ::std::default::Default::default()
    }

    // .Create create = 1;

    pub fn create(&self) -> &Create {
        match self.command {
            ::std::option::Option::Some(commands::Command::Create(ref v)) => v,
            _ => <Create as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_create(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_create(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(commands::Command::Create(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create(&mut self, v: Create) {
        self.command = ::std::option::Option::Some(commands::Command::Create(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create(&mut self) -> &mut Create {
        if let ::std::option::Option::Some(commands::Command::Create(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(commands::Command::Create(Create::new()));
        }
        match self.command {
            ::std::option::Option::Some(commands::Command::Create(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create(&mut self) -> Create {
        if self.has_create() {
            match self.command.take() {
                ::std::option::Option::Some(commands::Command::Create(v)) => v,
                _ => panic!(),
            }
        } else {
            Create::new()
        }
    }

    // .Read read = 2;

    pub fn read(&self) -> &Read {
        match self.command {
            ::std::option::Option::Some(commands::Command::Read(ref v)) => v,
            _ => <Read as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_read(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_read(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(commands::Command::Read(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read(&mut self, v: Read) {
        self.command = ::std::option::Option::Some(commands::Command::Read(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read(&mut self) -> &mut Read {
        if let ::std::option::Option::Some(commands::Command::Read(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(commands::Command::Read(Read::new()));
        }
        match self.command {
            ::std::option::Option::Some(commands::Command::Read(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read(&mut self) -> Read {
        if self.has_read() {
            match self.command.take() {
                ::std::option::Option::Some(commands::Command::Read(v)) => v,
                _ => panic!(),
            }
        } else {
            Read::new()
        }
    }

    // .Update update = 3;

    pub fn update(&self) -> &Update {
        match self.command {
            ::std::option::Option::Some(commands::Command::Update(ref v)) => v,
            _ => <Update as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_update(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(commands::Command::Update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: Update) {
        self.command = ::std::option::Option::Some(commands::Command::Update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut Update {
        if let ::std::option::Option::Some(commands::Command::Update(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(commands::Command::Update(Update::new()));
        }
        match self.command {
            ::std::option::Option::Some(commands::Command::Update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> Update {
        if self.has_update() {
            match self.command.take() {
                ::std::option::Option::Some(commands::Command::Update(v)) => v,
                _ => panic!(),
            }
        } else {
            Update::new()
        }
    }

    // .Delete delete = 4;

    pub fn delete(&self) -> &Delete {
        match self.command {
            ::std::option::Option::Some(commands::Command::Delete(ref v)) => v,
            _ => <Delete as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(commands::Command::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: Delete) {
        self.command = ::std::option::Option::Some(commands::Command::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut Delete {
        if let ::std::option::Option::Some(commands::Command::Delete(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(commands::Command::Delete(Delete::new()));
        }
        match self.command {
            ::std::option::Option::Some(commands::Command::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> Delete {
        if self.has_delete() {
            match self.command.take() {
                ::std::option::Option::Some(commands::Command::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            Delete::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Create>(
            "create",
            Commands::has_create,
            Commands::create,
            Commands::mut_create,
            Commands::set_create,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Read>(
            "read",
            Commands::has_read,
            Commands::read,
            Commands::mut_read,
            Commands::set_read,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Update>(
            "update",
            Commands::has_update,
            Commands::update,
            Commands::mut_update,
            Commands::set_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Delete>(
            "delete",
            Commands::has_delete,
            Commands::delete,
            Commands::mut_delete,
            Commands::set_delete,
        ));
        oneofs.push(commands::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Commands>(
            "Commands",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Commands {
    const NAME: &'static str = "Commands";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command = ::std::option::Option::Some(commands::Command::Create(is.read_message()?));
                },
                18 => {
                    self.command = ::std::option::Option::Some(commands::Command::Read(is.read_message()?));
                },
                26 => {
                    self.command = ::std::option::Option::Some(commands::Command::Update(is.read_message()?));
                },
                34 => {
                    self.command = ::std::option::Option::Some(commands::Command::Delete(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &commands::Command::Create(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commands::Command::Read(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commands::Command::Update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &commands::Command::Delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &commands::Command::Create(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &commands::Command::Read(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &commands::Command::Update(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &commands::Command::Delete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Commands {
        Commands::new()
    }

    fn clear(&mut self) {
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Commands {
        static instance: Commands = Commands {
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Commands {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Commands").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Commands {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commands {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Commands`
pub mod commands {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    // @@protoc_insertion_point(oneof:Commands.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:Commands.create)
        Create(super::Create),
        // @@protoc_insertion_point(oneof_field:Commands.read)
        Read(super::Read),
        // @@protoc_insertion_point(oneof_field:Commands.update)
        Update(super::Update),
        // @@protoc_insertion_point(oneof_field:Commands.delete)
        Delete(super::Delete),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Commands as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:Create)
pub struct Create {
    // message fields
    // @@protoc_insertion_point(field:Create.data)
    pub data: ::std::string::String,
    #[serde(with="crate::MessageFieldDef")]
    // @@protoc_insertion_point(field:Create.type)
    pub type_: ::protobuf::MessageField<DataType>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:Create.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Create {
    fn default() -> &'a Create {
        <Create as ::protobuf::Message>::default_instance()
    }
}

impl Create {
    pub fn new() -> Create {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Create| { &m.data },
            |m: &mut Create| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DataType>(
            "type",
            |m: &Create| { &m.type_ },
            |m: &mut Create| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Create>(
            "Create",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Create {
    const NAME: &'static str = "Create";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.type_)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        if let Some(v) = self.type_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        if let Some(v) = self.type_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Create {
        Create::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.type_.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Create {
        static instance: Create = Create {
            data: ::std::string::String::new(),
            type_: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Create {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Create").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Create {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Create {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:Read)
pub struct Read {
    // message fields
    // @@protoc_insertion_point(field:Read.id)
    pub id: ::std::string::String,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:Read.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Read {
    fn default() -> &'a Read {
        <Read as ::protobuf::Message>::default_instance()
    }
}

impl Read {
    pub fn new() -> Read {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Read| { &m.id },
            |m: &mut Read| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Read>(
            "Read",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Read {
    const NAME: &'static str = "Read";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Read {
        Read::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Read {
        static instance: Read = Read {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Read {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Read").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Read {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Read {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:Update)
pub struct Update {
    // message fields
    // @@protoc_insertion_point(field:Update.data)
    pub data: ::std::string::String,
    #[serde(with="crate::MessageFieldDef")]
    // @@protoc_insertion_point(field:Update.type)
    pub type_: ::protobuf::MessageField<DataType>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:Update.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Update {
    fn default() -> &'a Update {
        <Update as ::protobuf::Message>::default_instance()
    }
}

impl Update {
    pub fn new() -> Update {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Update| { &m.data },
            |m: &mut Update| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, DataType>(
            "type",
            |m: &Update| { &m.type_ },
            |m: &mut Update| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Update>(
            "Update",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Update {
    const NAME: &'static str = "Update";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.type_)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        if let Some(v) = self.type_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        if let Some(v) = self.type_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Update {
        Update::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.type_.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Update {
        static instance: Update = Update {
            data: ::std::string::String::new(),
            type_: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Update {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Update").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Update {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Update {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:Delete)
pub struct Delete {
    // message fields
    // @@protoc_insertion_point(field:Delete.id)
    pub id: ::std::string::String,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:Delete.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Delete {
    fn default() -> &'a Delete {
        <Delete as ::protobuf::Message>::default_instance()
    }
}

impl Delete {
    pub fn new() -> Delete {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Delete| { &m.id },
            |m: &mut Delete| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Delete>(
            "Delete",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Delete {
    const NAME: &'static str = "Delete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Delete {
        Delete::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Delete {
        static instance: Delete = Delete {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Delete {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Delete").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Delete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Delete {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
// @@protoc_insertion_point(message:DataType)
pub struct DataType {
    // message oneof groups
    pub type_: ::std::option::Option<data_type::Type>,
    // special fields
    #[serde(skip)]
    // @@protoc_insertion_point(special_field:DataType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataType {
    fn default() -> &'a DataType {
        <DataType as ::protobuf::Message>::default_instance()
    }
}

impl DataType {
    pub fn new() -> DataType {
        ::std::default::Default::default()
    }

    // int32 type1 = 1;

    pub fn type1(&self) -> i32 {
        match self.type_ {
            ::std::option::Option::Some(data_type::Type::Type1(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_type1(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type1(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(data_type::Type::Type1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_type1(&mut self, v: i32) {
        self.type_ = ::std::option::Option::Some(data_type::Type::Type1(v))
    }

    // string type2 = 2;

    pub fn type2(&self) -> &str {
        match self.type_ {
            ::std::option::Option::Some(data_type::Type::Type2(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_type2(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type2(&self) -> bool {
        match self.type_ {
            ::std::option::Option::Some(data_type::Type::Type2(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_type2(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(data_type::Type::Type2(v))
    }

    // Mutable pointer to the field.
    pub fn mut_type2(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(data_type::Type::Type2(_)) = self.type_ {
        } else {
            self.type_ = ::std::option::Option::Some(data_type::Type::Type2(::std::string::String::new()));
        }
        match self.type_ {
            ::std::option::Option::Some(data_type::Type::Type2(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_type2(&mut self) -> ::std::string::String {
        if self.has_type2() {
            match self.type_.take() {
                ::std::option::Option::Some(data_type::Type::Type2(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "type1",
            DataType::has_type1,
            DataType::type1,
            DataType::set_type1,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "type2",
            DataType::has_type2,
            DataType::type2,
            DataType::set_type2,
        ));
        oneofs.push(data_type::Type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataType>(
            "DataType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataType {
    const NAME: &'static str = "DataType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(data_type::Type::Type1(is.read_int32()?));
                },
                18 => {
                    self.type_ = ::std::option::Option::Some(data_type::Type::Type2(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &data_type::Type::Type1(v) => {
                    my_size += ::protobuf::rt::int32_size(1, v);
                },
                &data_type::Type::Type2(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.type_ {
            match v {
                &data_type::Type::Type1(v) => {
                    os.write_int32(1, v)?;
                },
                &data_type::Type::Type2(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataType {
        DataType::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataType {
        static instance: DataType = DataType {
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DataType`
pub mod data_type {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    // @@protoc_insertion_point(oneof:DataType.type)
    pub enum Type {
        // @@protoc_insertion_point(oneof_field:DataType.type1)
        Type1(i32),
        // @@protoc_insertion_point(oneof_field:DataType.type2)
        Type2(::std::string::String),
    }

    impl ::protobuf::Oneof for Type {
    }

    impl ::protobuf::OneofFull for Type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::DataType as ::protobuf::MessageFull>::descriptor().oneof_by_name("type").unwrap()).clone()
        }
    }

    impl Type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Type>("type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntest.proto\"\x9b\x01\n\x08Commands\x12!\n\x06create\x18\x01\x20\x01(\
    \x0b2\x07.CreateH\0R\x06create\x12\x1b\n\x04read\x18\x02\x20\x01(\x0b2\
    \x05.ReadH\0R\x04read\x12!\n\x06update\x18\x03\x20\x01(\x0b2\x07.UpdateH\
    \0R\x06update\x12!\n\x06delete\x18\x04\x20\x01(\x0b2\x07.DeleteH\0R\x06d\
    eleteB\t\n\x07command\";\n\x06Create\x12\x12\n\x04data\x18\x01\x20\x01(\
    \tR\x04data\x12\x1d\n\x04type\x18\x02\x20\x01(\x0b2\t.DataTypeR\x04type\
    \"\x16\n\x04Read\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\";\n\x06Updat\
    e\x12\x12\n\x04data\x18\x01\x20\x01(\tR\x04data\x12\x1d\n\x04type\x18\
    \x02\x20\x01(\x0b2\t.DataTypeR\x04type\"\x18\n\x06Delete\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\"B\n\x08DataType\x12\x16\n\x05type1\x18\x01\
    \x20\x01(\x05H\0R\x05type1\x12\x16\n\x05type2\x18\x02\x20\x01(\tH\0R\x05\
    type2B\x06\n\x04typeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Commands::generated_message_descriptor_data());
            messages.push(Create::generated_message_descriptor_data());
            messages.push(Read::generated_message_descriptor_data());
            messages.push(Update::generated_message_descriptor_data());
            messages.push(Delete::generated_message_descriptor_data());
            messages.push(DataType::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
